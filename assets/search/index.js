(()=>{var t={813:function(t){
/*!***************************************************
* mark.js v8.11.1
* https://markjs.io/
* Copyright (c) 2014–2018, Julian Kühnel
* Released under the MIT license https://git.io/vwTVl
*****************************************************/
t.exports=function(){"use strict";var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},n=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=function(){function t(n){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:5e3;e(this,t),this.ctx=n,this.iframes=r,this.exclude=i,this.iframesTimeout=s}return n(t,[{key:"getContexts",value:function(){var t=[];return(void 0!==this.ctx&&this.ctx?NodeList.prototype.isPrototypeOf(this.ctx)?Array.prototype.slice.call(this.ctx):Array.isArray(this.ctx)?this.ctx:"string"==typeof this.ctx?Array.prototype.slice.call(document.querySelectorAll(this.ctx)):[this.ctx]:[]).forEach((function(e){var n=t.filter((function(t){return t.contains(e)})).length>0;-1!==t.indexOf(e)||n||t.push(e)})),t}},{key:"getIframeContents",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=void 0;try{var i=t.contentWindow;if(r=i.document,!i||!r)throw new Error("iframe inaccessible")}catch(t){n()}r&&e(r)}},{key:"isIframeBlank",value:function(t){var e="about:blank",n=t.getAttribute("src").trim();return t.contentWindow.location.href===e&&n!==e&&n}},{key:"observeIframeLoad",value:function(t,e,n){var r=this,i=!1,s=null,o=function o(){if(!i){i=!0,clearTimeout(s);try{r.isIframeBlank(t)||(t.removeEventListener("load",o),r.getIframeContents(t,e,n))}catch(t){n()}}};t.addEventListener("load",o),s=setTimeout(o,this.iframesTimeout)}},{key:"onIframeReady",value:function(t,e,n){try{"complete"===t.contentWindow.document.readyState?this.isIframeBlank(t)?this.observeIframeLoad(t,e,n):this.getIframeContents(t,e,n):this.observeIframeLoad(t,e,n)}catch(t){n()}}},{key:"waitForIframes",value:function(t,e){var n=this,r=0;this.forEachIframe(t,(function(){return!0}),(function(t){r++,n.waitForIframes(t.querySelector("html"),(function(){--r||e()}))}),(function(t){t||e()}))}},{key:"forEachIframe",value:function(e,n,r){var i=this,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=e.querySelectorAll("iframe"),a=o.length,c=0;o=Array.prototype.slice.call(o);var h=function(){--a<=0&&s(c)};a||h(),o.forEach((function(e){t.matches(e,i.exclude)?h():i.onIframeReady(e,(function(t){n(e)&&(c++,r(t)),h()}),h)}))}},{key:"createIterator",value:function(t,e,n){return document.createNodeIterator(t,e,n,!1)}},{key:"createInstanceOnIframe",value:function(e){return new t(e.querySelector("html"),this.iframes)}},{key:"compareNodeIframe",value:function(t,e,n){if(t.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_PRECEDING){if(null===e)return!0;if(e.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_FOLLOWING)return!0}return!1}},{key:"getIteratorNode",value:function(t){var e=t.previousNode();return{prevNode:e,node:(null===e||t.nextNode())&&t.nextNode()}}},{key:"checkIframeFilter",value:function(t,e,n,r){var i=!1,s=!1;return r.forEach((function(t,e){t.val===n&&(i=e,s=t.handled)})),this.compareNodeIframe(t,e,n)?(!1!==i||s?!1===i||s||(r[i].handled=!0):r.push({val:n,handled:!0}),!0):(!1===i&&r.push({val:n,handled:!1}),!1)}},{key:"handleOpenIframes",value:function(t,e,n,r){var i=this;t.forEach((function(t){t.handled||i.getIframeContents(t.val,(function(t){i.createInstanceOnIframe(t).forEachNode(e,n,r)}))}))}},{key:"iterateThroughNodes",value:function(t,e,n,r,i){for(var s=this,o=this.createIterator(e,t,r),a=[],c=[],h=void 0,u=void 0,l=function(){var t=s.getIteratorNode(o);return u=t.prevNode,h=t.node};l();)this.iframes&&this.forEachIframe(e,(function(t){return s.checkIframeFilter(h,u,t,a)}),(function(e){s.createInstanceOnIframe(e).forEachNode(t,(function(t){return c.push(t)}),r)})),c.push(h);c.forEach((function(t){n(t)})),this.iframes&&this.handleOpenIframes(a,t,n,r),i()}},{key:"forEachNode",value:function(t,e,n){var r=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},s=this.getContexts(),o=s.length;o||i(),s.forEach((function(s){var a=function(){r.iterateThroughNodes(t,s,e,n,(function(){--o<=0&&i()}))};r.iframes?r.waitForIframes(s,a):a()}))}}],[{key:"matches",value:function(t,e){var n="string"==typeof e?[e]:e,r=t.matches||t.matchesSelector||t.msMatchesSelector||t.mozMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector;if(r){var i=!1;return n.every((function(e){return!r.call(t,e)||(i=!0,!1)})),i}return!1}}]),t}(),s=function(){function s(t){e(this,s),this.ctx=t,this.ie=!1;var n=window.navigator.userAgent;(n.indexOf("MSIE")>-1||n.indexOf("Trident")>-1)&&(this.ie=!0)}return n(s,[{key:"log",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"debug",r=this.opt.log;this.opt.debug&&"object"===(void 0===r?"undefined":t(r))&&"function"==typeof r[n]&&r[n]("mark.js: "+e)}},{key:"escapeStr",value:function(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}},{key:"createRegExp",value:function(t){return"disabled"!==this.opt.wildcards&&(t=this.setupWildcardsRegExp(t)),t=this.escapeStr(t),Object.keys(this.opt.synonyms).length&&(t=this.createSynonymsRegExp(t)),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(t=this.setupIgnoreJoinersRegExp(t)),this.opt.diacritics&&(t=this.createDiacriticsRegExp(t)),t=this.createMergedBlanksRegExp(t),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(t=this.createJoinersRegExp(t)),"disabled"!==this.opt.wildcards&&(t=this.createWildcardsRegExp(t)),t=this.createAccuracyRegExp(t)}},{key:"createSynonymsRegExp",value:function(t){var e=this.opt.synonyms,n=this.opt.caseSensitive?"":"i",r=this.opt.ignoreJoiners||this.opt.ignorePunctuation.length?"\0":"";for(var i in e)if(e.hasOwnProperty(i)){var s=e[i],o="disabled"!==this.opt.wildcards?this.setupWildcardsRegExp(i):this.escapeStr(i),a="disabled"!==this.opt.wildcards?this.setupWildcardsRegExp(s):this.escapeStr(s);""!==o&&""!==a&&(t=t.replace(new RegExp("("+this.escapeStr(o)+"|"+this.escapeStr(a)+")","gm"+n),r+"("+this.processSynomyms(o)+"|"+this.processSynomyms(a)+")"+r))}return t}},{key:"processSynomyms",value:function(t){return(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(t=this.setupIgnoreJoinersRegExp(t)),t}},{key:"setupWildcardsRegExp",value:function(t){return(t=t.replace(/(?:\\)*\?/g,(function(t){return"\\"===t.charAt(0)?"?":""}))).replace(/(?:\\)*\*/g,(function(t){return"\\"===t.charAt(0)?"*":""}))}},{key:"createWildcardsRegExp",value:function(t){var e="withSpaces"===this.opt.wildcards;return t.replace(/\u0001/g,e?"[\\S\\s]?":"\\S?").replace(/\u0002/g,e?"[\\S\\s]*?":"\\S*")}},{key:"setupIgnoreJoinersRegExp",value:function(t){return t.replace(/[^(|)\\]/g,(function(t,e,n){var r=n.charAt(e+1);return/[(|)\\]/.test(r)||""===r?t:t+"\0"}))}},{key:"createJoinersRegExp",value:function(t){var e=[],n=this.opt.ignorePunctuation;return Array.isArray(n)&&n.length&&e.push(this.escapeStr(n.join(""))),this.opt.ignoreJoiners&&e.push("\\u00ad\\u200b\\u200c\\u200d"),e.length?t.split(/\u0000+/).join("["+e.join("")+"]*"):t}},{key:"createDiacriticsRegExp",value:function(t){var e=this.opt.caseSensitive?"":"i",n=this.opt.caseSensitive?["aàáảãạăằắẳẵặâầấẩẫậäåāą","AÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćč","CÇĆČ","dđď","DĐĎ","eèéẻẽẹêềếểễệëěēę","EÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïī","IÌÍỈĨỊÎÏĪ","lł","LŁ","nñňń","NÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøō","OÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rř","RŘ","sšśșş","SŠŚȘŞ","tťțţ","TŤȚŢ","uùúủũụưừứửữựûüůū","UÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿ","YÝỲỶỸỴŸ","zžżź","ZŽŻŹ"]:["aàáảãạăằắẳẵặâầấẩẫậäåāąAÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćčCÇĆČ","dđďDĐĎ","eèéẻẽẹêềếểễệëěēęEÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïīIÌÍỈĨỊÎÏĪ","lłLŁ","nñňńNÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøōOÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rřRŘ","sšśșşSŠŚȘŞ","tťțţTŤȚŢ","uùúủũụưừứửữựûüůūUÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿYÝỲỶỸỴŸ","zžżźZŽŻŹ"],r=[];return t.split("").forEach((function(i){n.every((function(n){if(-1!==n.indexOf(i)){if(r.indexOf(n)>-1)return!1;t=t.replace(new RegExp("["+n+"]","gm"+e),"["+n+"]"),r.push(n)}return!0}))})),t}},{key:"createMergedBlanksRegExp",value:function(t){return t.replace(/[\s]+/gim,"[\\s]+")}},{key:"createAccuracyRegExp",value:function(t){var e=this,n="!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~¡¿",r=this.opt.accuracy,i="string"==typeof r?r:r.value,s="string"==typeof r?[]:r.limiters,o="";switch(s.forEach((function(t){o+="|"+e.escapeStr(t)})),i){case"partially":default:return"()("+t+")";case"complementary":return"()([^"+(o="\\s"+(o||this.escapeStr(n)))+"]*"+t+"[^"+o+"]*)";case"exactly":return"(^|\\s"+o+")("+t+")(?=$|\\s"+o+")"}}},{key:"getSeparatedKeywords",value:function(t){var e=this,n=[];return t.forEach((function(t){e.opt.separateWordSearch?t.split(" ").forEach((function(t){t.trim()&&-1===n.indexOf(t)&&n.push(t)})):t.trim()&&-1===n.indexOf(t)&&n.push(t)})),{keywords:n.sort((function(t,e){return e.length-t.length})),length:n.length}}},{key:"isNumeric",value:function(t){return Number(parseFloat(t))==t}},{key:"checkRanges",value:function(t){var e=this;if(!Array.isArray(t)||"[object Object]"!==Object.prototype.toString.call(t[0]))return this.log("markRanges() will only accept an array of objects"),this.opt.noMatch(t),[];var n=[],r=0;return t.sort((function(t,e){return t.start-e.start})).forEach((function(t){var i=e.callNoMatchOnInvalidRanges(t,r),s=i.start,o=i.end;i.valid&&(t.start=s,t.length=o-s,n.push(t),r=o)})),n}},{key:"callNoMatchOnInvalidRanges",value:function(t,e){var n=void 0,r=void 0,i=!1;return t&&void 0!==t.start?(r=(n=parseInt(t.start,10))+parseInt(t.length,10),this.isNumeric(t.start)&&this.isNumeric(t.length)&&r-e>0&&r-n>0?i=!0:(this.log("Ignoring invalid or overlapping range: "+JSON.stringify(t)),this.opt.noMatch(t))):(this.log("Ignoring invalid range: "+JSON.stringify(t)),this.opt.noMatch(t)),{start:n,end:r,valid:i}}},{key:"checkWhitespaceRanges",value:function(t,e,n){var r=void 0,i=!0,s=n.length,o=e-s,a=parseInt(t.start,10)-o;return(r=(a=a>s?s:a)+parseInt(t.length,10))>s&&(r=s,this.log("End range automatically set to the max value of "+s)),a<0||r-a<0||a>s||r>s?(i=!1,this.log("Invalid range: "+JSON.stringify(t)),this.opt.noMatch(t)):""===n.substring(a,r).replace(/\s+/g,"")&&(i=!1,this.log("Skipping whitespace only range: "+JSON.stringify(t)),this.opt.noMatch(t)),{start:a,end:r,valid:i}}},{key:"getTextNodes",value:function(t){var e=this,n="",r=[];this.iterator.forEachNode(NodeFilter.SHOW_TEXT,(function(t){r.push({start:n.length,end:(n+=t.textContent).length,node:t})}),(function(t){return e.matchesExclude(t.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT}),(function(){t({value:n,nodes:r})}))}},{key:"matchesExclude",value:function(t){return i.matches(t,this.opt.exclude.concat(["script","style","title","head","html"]))}},{key:"wrapRangeInTextNode",value:function(t,e,n){var r=this.opt.element?this.opt.element:"mark",i=t.splitText(e),s=i.splitText(n-e),o=document.createElement(r);return o.setAttribute("data-markjs","true"),this.opt.className&&o.setAttribute("class",this.opt.className),o.textContent=i.textContent,i.parentNode.replaceChild(o,i),s}},{key:"wrapRangeInMappedTextNode",value:function(t,e,n,r,i){var s=this;t.nodes.every((function(o,a){var c=t.nodes[a+1];if(void 0===c||c.start>e){if(!r(o.node))return!1;var h=e-o.start,u=(n>o.end?o.end:n)-o.start,l=t.value.substr(0,o.start),d=t.value.substr(u+o.start);if(o.node=s.wrapRangeInTextNode(o.node,h,u),t.value=l+d,t.nodes.forEach((function(e,n){n>=a&&(t.nodes[n].start>0&&n!==a&&(t.nodes[n].start-=u),t.nodes[n].end-=u)})),n-=u,i(o.node.previousSibling,o.start),!(n>o.end))return!1;e=o.end}return!0}))}},{key:"wrapMatches",value:function(t,e,n,r,i){var s=this,o=0===e?0:e+1;this.getTextNodes((function(e){e.nodes.forEach((function(e){e=e.node;for(var i=void 0;null!==(i=t.exec(e.textContent))&&""!==i[o];)if(n(i[o],e)){var a=i.index;if(0!==o)for(var c=1;c<o;c++)a+=i[c].length;e=s.wrapRangeInTextNode(e,a,a+i[o].length),r(e.previousSibling),t.lastIndex=0}})),i()}))}},{key:"wrapMatchesAcrossElements",value:function(t,e,n,r,i){var s=this,o=0===e?0:e+1;this.getTextNodes((function(e){for(var a=void 0;null!==(a=t.exec(e.value))&&""!==a[o];){var c=a.index;if(0!==o)for(var h=1;h<o;h++)c+=a[h].length;var u=c+a[o].length;s.wrapRangeInMappedTextNode(e,c,u,(function(t){return n(a[o],t)}),(function(e,n){t.lastIndex=n,r(e)}))}i()}))}},{key:"wrapRangeFromIndex",value:function(t,e,n,r){var i=this;this.getTextNodes((function(s){var o=s.value.length;t.forEach((function(t,r){var a=i.checkWhitespaceRanges(t,o,s.value),c=a.start,h=a.end;a.valid&&i.wrapRangeInMappedTextNode(s,c,h,(function(n){return e(n,t,s.value.substring(c,h),r)}),(function(e){n(e,t)}))})),r()}))}},{key:"unwrapMatches",value:function(t){for(var e=t.parentNode,n=document.createDocumentFragment();t.firstChild;)n.appendChild(t.removeChild(t.firstChild));e.replaceChild(n,t),this.ie?this.normalizeTextNode(e):e.normalize()}},{key:"normalizeTextNode",value:function(t){if(t){if(3===t.nodeType)for(;t.nextSibling&&3===t.nextSibling.nodeType;)t.nodeValue+=t.nextSibling.nodeValue,t.parentNode.removeChild(t.nextSibling);else this.normalizeTextNode(t.firstChild);this.normalizeTextNode(t.nextSibling)}}},{key:"markRegExp",value:function(t,e){var n=this;this.opt=e,this.log('Searching with expression "'+t+'"');var r=0,i="wrapMatches",s=function(t){r++,n.opt.each(t)};this.opt.acrossElements&&(i="wrapMatchesAcrossElements"),this[i](t,this.opt.ignoreGroups,(function(t,e){return n.opt.filter(e,t,r)}),s,(function(){0===r&&n.opt.noMatch(t),n.opt.done(r)}))}},{key:"mark",value:function(t,e){var n=this;this.opt=e;var r=0,i="wrapMatches",s=this.getSeparatedKeywords("string"==typeof t?[t]:t),o=s.keywords,a=s.length,c=this.opt.caseSensitive?"":"i",h=function t(e){var s=new RegExp(n.createRegExp(e),"gm"+c),h=0;n.log('Searching with expression "'+s+'"'),n[i](s,1,(function(t,i){return n.opt.filter(i,e,r,h)}),(function(t){h++,r++,n.opt.each(t)}),(function(){0===h&&n.opt.noMatch(e),o[a-1]===e?n.opt.done(r):t(o[o.indexOf(e)+1])}))};this.opt.acrossElements&&(i="wrapMatchesAcrossElements"),0===a?this.opt.done(r):h(o[0])}},{key:"markRanges",value:function(t,e){var n=this;this.opt=e;var r=0,i=this.checkRanges(t);i&&i.length?(this.log("Starting to mark with the following ranges: "+JSON.stringify(i)),this.wrapRangeFromIndex(i,(function(t,e,r,i){return n.opt.filter(t,e,r,i)}),(function(t,e){r++,n.opt.each(t,e)}),(function(){n.opt.done(r)}))):this.opt.done(r)}},{key:"unmark",value:function(t){var e=this;this.opt=t;var n=this.opt.element?this.opt.element:"*";n+="[data-markjs]",this.opt.className&&(n+="."+this.opt.className),this.log('Removal selector "'+n+'"'),this.iterator.forEachNode(NodeFilter.SHOW_ELEMENT,(function(t){e.unwrapMatches(t)}),(function(t){var r=i.matches(t,n),s=e.matchesExclude(t);return!r||s?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT}),this.opt.done)}},{key:"opt",set:function(t){this._opt=r({},{element:"",className:"",exclude:[],iframes:!1,iframesTimeout:5e3,separateWordSearch:!0,diacritics:!0,synonyms:{},accuracy:"partially",acrossElements:!1,caseSensitive:!1,ignoreJoiners:!1,ignoreGroups:0,ignorePunctuation:[],wildcards:"disabled",each:function(){},noMatch:function(){},filter:function(){return!0},done:function(){},debug:!1,log:window.console},t)},get:function(){return this._opt}},{key:"iterator",get:function(){return new i(this.ctx,this.opt.iframes,this.opt.exclude,this.opt.iframesTimeout)}}]),s}();function o(t){var e=this,n=new s(t);return this.mark=function(t,r){return n.mark(t,r),e},this.markRegExp=function(t,r){return n.markRegExp(t,r),e},this.markRanges=function(t,r){return n.markRanges(t,r),e},this.unmark=function(t){return n.unmark(t),e},this}return o}()}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var s=e[r]={exports:{}};return t[r].call(s.exports,s,s.exports,n),s.exports}(()=>{"use strict";function t(t){return Array.isArray?Array.isArray(t):"[object Array]"===c(t)}function e(t){return"string"==typeof t}function r(t){return"number"==typeof t}function i(t){return!0===t||!1===t||function(t){return s(t)&&null!==t}(t)&&"[object Boolean]"==c(t)}function s(t){return"object"==typeof t}function o(t){return null!=t}function a(t){return!t.trim().length}function c(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Object.prototype.toString.call(t)}const h=Object.prototype.hasOwnProperty;class u{constructor(t){this._keys=[],this._keyMap={};let e=0;t.forEach((t=>{let n=l(t);e+=n.weight,this._keys.push(n),this._keyMap[n.id]=n,e+=n.weight})),this._keys.forEach((t=>{t.weight/=e}))}get(t){return this._keyMap[t]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function l(n){let r=null,i=null,s=null,o=1;if(e(n)||t(n))s=n,r=d(n),i=p(n);else{if(!h.call(n,"name"))throw new Error((t=>`Missing ${t} property in key`)("name"));const t=n.name;if(s=t,h.call(n,"weight")&&(o=n.weight,o<=0))throw new Error((t=>`Property 'weight' in key '${t}' must be a positive integer`)(t));r=d(t),i=p(t)}return{path:r,id:i,weight:o,src:s}}function d(e){return t(e)?e:e.split(".")}function p(e){return t(e)?e.join("."):e}var f={isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(t,e)=>t.score===e.score?t.idx<e.idx?-1:1:t.score<e.score?-1:1,includeMatches:!1,findAllMatches:!1,minMatchCharLength:1,location:0,threshold:.6,distance:100,...{useExtendedSearch:!1,getFn:function(n,s){let a=[],c=!1;const h=(n,s,u)=>{if(o(n))if(s[u]){const l=n[s[u]];if(!o(l))return;if(u===s.length-1&&(e(l)||r(l)||i(l)))a.push(function(t){return null==t?"":function(t){if("string"==typeof t)return t;let e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(t)}(l));else if(t(l)){c=!0;for(let t=0,e=l.length;t<e;t+=1)h(l[t],s,u+1)}else s.length&&h(l,s,u+1)}else a.push(n)};return h(n,e(s)?s.split("."):s,0),c?a:a[0]},ignoreLocation:!1,ignoreFieldNorm:!1}};const g=/[^ ]+/g;class m{constructor({getFn:t=f.getFn}={}){this.norm=function(t=3){const e=new Map,n=Math.pow(10,t);return{get(t){const r=t.match(g).length;if(e.has(r))return e.get(r);const i=1/Math.sqrt(r),s=parseFloat(Math.round(i*n)/n);return e.set(r,s),s},clear(){e.clear()}}}(3),this.getFn=t,this.isCreated=!1,this.setIndexRecords()}setSources(t=[]){this.docs=t}setIndexRecords(t=[]){this.records=t}setKeys(t=[]){this.keys=t,this._keysMap={},t.forEach(((t,e)=>{this._keysMap[t.id]=e}))}create(){!this.isCreated&&this.docs.length&&(this.isCreated=!0,e(this.docs[0])?this.docs.forEach(((t,e)=>{this._addString(t,e)})):this.docs.forEach(((t,e)=>{this._addObject(t,e)})),this.norm.clear())}add(t){const n=this.size();e(t)?this._addString(t,n):this._addObject(t,n)}removeAt(t){this.records.splice(t,1);for(let e=t,n=this.size();e<n;e+=1)this.records[e].i-=1}getValueForItemAtKeyId(t,e){return t[this._keysMap[e]]}size(){return this.records.length}_addString(t,e){if(!o(t)||a(t))return;let n={v:t,i:e,n:this.norm.get(t)};this.records.push(n)}_addObject(n,r){let i={i:r,$:{}};this.keys.forEach(((r,s)=>{let c=this.getFn(n,r.path);if(o(c))if(t(c)){let n=[];const r=[{nestedArrIndex:-1,value:c}];for(;r.length;){const{nestedArrIndex:i,value:s}=r.pop();if(o(s))if(e(s)&&!a(s)){let t={v:s,i,n:this.norm.get(s)};n.push(t)}else t(s)&&s.forEach(((t,e)=>{r.push({nestedArrIndex:e,value:t})}))}i.$[s]=n}else if(!a(c)){let t={v:c,n:this.norm.get(c)};i.$[s]=t}})),this.records.push(i)}toJSON(){return{keys:this.keys,records:this.records}}}function v(t,e,{getFn:n=f.getFn}={}){const r=new m({getFn:n});return r.setKeys(t.map(l)),r.setSources(e),r.create(),r}function y(t,{errors:e=0,currentLocation:n=0,expectedLocation:r=0,distance:i=f.distance,ignoreLocation:s=f.ignoreLocation}={}){const o=e/t.length;if(s)return o;const a=Math.abs(r-n);return i?o+a/i:a?1:o}const x=32;function w(t,e,n,{location:r=f.location,distance:i=f.distance,threshold:s=f.threshold,findAllMatches:o=f.findAllMatches,minMatchCharLength:a=f.minMatchCharLength,includeMatches:c=f.includeMatches,ignoreLocation:h=f.ignoreLocation}={}){if(e.length>x)throw new Error(`Pattern length exceeds max of ${x}.`);const u=e.length,l=t.length,d=Math.max(0,Math.min(r,l));let p=s,g=d;const m=a>1||c,v=m?Array(l):[];let w;for(;(w=t.indexOf(e,g))>-1;){let t=y(e,{currentLocation:w,expectedLocation:d,distance:i,ignoreLocation:h});if(p=Math.min(t,p),g=w+u,m){let t=0;for(;t<u;)v[w+t]=1,t+=1}}g=-1;let k=[],M=1,E=u+l;const S=1<<u-1;for(let r=0;r<u;r+=1){let s=0,a=E;for(;s<a;){y(e,{errors:r,currentLocation:d+a,expectedLocation:d,distance:i,ignoreLocation:h})<=p?s=a:E=a,a=Math.floor((E-s)/2+s)}E=a;let c=Math.max(1,d-a+1),f=o?l:Math.min(d+a,l)+u,x=Array(f+2);x[f+1]=(1<<r)-1;for(let s=f;s>=c;s-=1){let o=s-1,a=n[t.charAt(o)];if(m&&(v[o]=+!!a),x[s]=(x[s+1]<<1|1)&a,r&&(x[s]|=(k[s+1]|k[s])<<1|1|k[s+1]),x[s]&S&&(M=y(e,{errors:r,currentLocation:o,expectedLocation:d,distance:i,ignoreLocation:h}),M<=p)){if(p=M,g=o,g<=d)break;c=Math.max(1,2*d-g)}}if(y(e,{errors:r+1,currentLocation:d,expectedLocation:d,distance:i,ignoreLocation:h})>p)break;k=x}const I={isMatch:g>=0,score:Math.max(.001,M)};if(m){const t=function(t=[],e=f.minMatchCharLength){let n=[],r=-1,i=-1,s=0;for(let o=t.length;s<o;s+=1){let o=t[s];o&&-1===r?r=s:o||-1===r||(i=s-1,i-r+1>=e&&n.push([r,i]),r=-1)}return t[s-1]&&s-r>=e&&n.push([r,s-1]),n}(v,a);t.length?c&&(I.indices=t):I.isMatch=!1}return I}function k(t){let e={};for(let n=0,r=t.length;n<r;n+=1){const i=t.charAt(n);e[i]=(e[i]||0)|1<<r-n-1}return e}class M{constructor(t,{location:e=f.location,threshold:n=f.threshold,distance:r=f.distance,includeMatches:i=f.includeMatches,findAllMatches:s=f.findAllMatches,minMatchCharLength:o=f.minMatchCharLength,isCaseSensitive:a=f.isCaseSensitive,ignoreLocation:c=f.ignoreLocation}={}){if(this.options={location:e,threshold:n,distance:r,includeMatches:i,findAllMatches:s,minMatchCharLength:o,isCaseSensitive:a,ignoreLocation:c},this.pattern=a?t:t.toLowerCase(),this.chunks=[],!this.pattern.length)return;const h=(t,e)=>{this.chunks.push({pattern:t,alphabet:k(t),startIndex:e})},u=this.pattern.length;if(u>x){let t=0;const e=u%x,n=u-e;for(;t<n;)h(this.pattern.substr(t,x),t),t+=x;if(e){const t=u-x;h(this.pattern.substr(t),t)}}else h(this.pattern,0)}searchIn(t){const{isCaseSensitive:e,includeMatches:n}=this.options;if(e||(t=t.toLowerCase()),this.pattern===t){let e={isMatch:!0,score:0};return n&&(e.indices=[[0,t.length-1]]),e}const{location:r,distance:i,threshold:s,findAllMatches:o,minMatchCharLength:a,ignoreLocation:c}=this.options;let h=[],u=0,l=!1;this.chunks.forEach((({pattern:e,alphabet:d,startIndex:p})=>{const{isMatch:f,score:g,indices:m}=w(t,e,d,{location:r+p,distance:i,threshold:s,findAllMatches:o,minMatchCharLength:a,includeMatches:n,ignoreLocation:c});f&&(l=!0),u+=g,f&&m&&(h=[...h,...m])}));let d={isMatch:l,score:l?u/this.chunks.length:1};return l&&n&&(d.indices=h),d}}class E{constructor(t){this.pattern=t}static isMultiMatch(t){return S(t,this.multiRegex)}static isSingleMatch(t){return S(t,this.singleRegex)}search(){}}function S(t,e){const n=t.match(e);return n?n[1]:null}class I extends E{constructor(t,{location:e=f.location,threshold:n=f.threshold,distance:r=f.distance,includeMatches:i=f.includeMatches,findAllMatches:s=f.findAllMatches,minMatchCharLength:o=f.minMatchCharLength,isCaseSensitive:a=f.isCaseSensitive,ignoreLocation:c=f.ignoreLocation}={}){super(t),this._bitapSearch=new M(t,{location:e,threshold:n,distance:r,includeMatches:i,findAllMatches:s,minMatchCharLength:o,isCaseSensitive:a,ignoreLocation:c})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(t){return this._bitapSearch.searchIn(t)}}class b extends E{constructor(t){super(t)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(t){let e,n=0;const r=[],i=this.pattern.length;for(;(e=t.indexOf(this.pattern,n))>-1;)n=e+i,r.push([e,n-1]);const s=!!r.length;return{isMatch:s,score:s?0:1,indices:r}}}const L=[class extends E{constructor(t){super(t)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(t){const e=t===this.pattern;return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},b,class extends E{constructor(t){super(t)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(t){const e=t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},class extends E{constructor(t){super(t)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(t){const e=!t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends E{constructor(t){super(t)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(t){const e=!t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends E{constructor(t){super(t)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(t){const e=t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[t.length-this.pattern.length,t.length-1]}}},class extends E{constructor(t){super(t)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(t){const e=-1===t.indexOf(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},I],C=L.length,R=/ +(?=([^\"]*\"[^\"]*\")*[^\"]*$)/;const N=new Set([I.type,b.type]);class O{constructor(t,{isCaseSensitive:e=f.isCaseSensitive,includeMatches:n=f.includeMatches,minMatchCharLength:r=f.minMatchCharLength,ignoreLocation:i=f.ignoreLocation,findAllMatches:s=f.findAllMatches,location:o=f.location,threshold:a=f.threshold,distance:c=f.distance}={}){this.query=null,this.options={isCaseSensitive:e,includeMatches:n,minMatchCharLength:r,findAllMatches:s,ignoreLocation:i,location:o,threshold:a,distance:c},this.pattern=e?t:t.toLowerCase(),this.query=function(t,e={}){return t.split("|").map((t=>{let n=t.trim().split(R).filter((t=>t&&!!t.trim())),r=[];for(let t=0,i=n.length;t<i;t+=1){const i=n[t];let s=!1,o=-1;for(;!s&&++o<C;){const t=L[o];let n=t.isMultiMatch(i);n&&(r.push(new t(n,e)),s=!0)}if(!s)for(o=-1;++o<C;){const t=L[o];let n=t.isSingleMatch(i);if(n){r.push(new t(n,e));break}}}return r}))}(this.pattern,this.options)}static condition(t,e){return e.useExtendedSearch}searchIn(t){const e=this.query;if(!e)return{isMatch:!1,score:1};const{includeMatches:n,isCaseSensitive:r}=this.options;t=r?t:t.toLowerCase();let i=0,s=[],o=0;for(let r=0,a=e.length;r<a;r+=1){const a=e[r];s.length=0,i=0;for(let e=0,r=a.length;e<r;e+=1){const r=a[e],{isMatch:c,indices:h,score:u}=r.search(t);if(!c){o=0,i=0,s.length=0;break}if(i+=1,o+=u,n){const t=r.constructor.type;N.has(t)?s=[...s,...h]:s.push(h)}}if(i){let t={isMatch:!0,score:o/i};return n&&(t.indices=s),t}}return{isMatch:!1,score:1}}}const T=[];function A(t,e){for(let n=0,r=T.length;n<r;n+=1){let r=T[n];if(r.condition(t,e))return new r(t,e)}return new M(t,e)}const _="$and",F="$or",$="$path",j="$val",P=t=>!(!t[_]&&!t[F]),W=t=>({[_]:Object.keys(t).map((e=>({[e]:t[e]})))});function B(n,r,{auto:i=!0}={}){const o=n=>{let a=Object.keys(n);const c=(t=>!!t[$])(n);if(!c&&a.length>1&&!P(n))return o(W(n));if((e=>!t(e)&&s(e)&&!P(e))(n)){const t=c?n[$]:a[0],s=c?n[j]:n[t];if(!e(s))throw new Error((t=>`Invalid value for key ${t}`)(t));const o={keyId:p(t),pattern:s};return i&&(o.searcher=A(s,r)),o}let h={children:[],operator:a[0]};return a.forEach((e=>{const r=n[e];t(r)&&r.forEach((t=>{h.children.push(o(t))}))})),h};return P(n)||(n=W(n)),o(n)}function q(t,e){const n=t.matches;e.matches=[],o(n)&&n.forEach((t=>{if(!o(t.indices)||!t.indices.length)return;const{indices:n,value:r}=t;let i={indices:n,value:r};t.key&&(i.key=t.key.src),t.idx>-1&&(i.refIndex=t.idx),e.matches.push(i)}))}function J(t,e){e.score=t.score}class U{constructor(t,e={},n){this.options={...f,...e},this.options.useExtendedSearch,this._keyStore=new u(this.options.keys),this.setCollection(t,n)}setCollection(t,e){if(this._docs=t,e&&!(e instanceof m))throw new Error("Incorrect 'index' type");this._myIndex=e||v(this.options.keys,this._docs,{getFn:this.options.getFn})}add(t){o(t)&&(this._docs.push(t),this._myIndex.add(t))}remove(t=(()=>!1)){const e=[];for(let n=0,r=this._docs.length;n<r;n+=1){const i=this._docs[n];t(i,n)&&(this.removeAt(n),n-=1,r-=1,e.push(i))}return e}removeAt(t){this._docs.splice(t,1),this._myIndex.removeAt(t)}getIndex(){return this._myIndex}search(t,{limit:n=-1}={}){const{includeMatches:i,includeScore:s,shouldSort:o,sortFn:a,ignoreFieldNorm:c}=this.options;let h=e(t)?e(this._docs[0])?this._searchStringList(t):this._searchObjectList(t):this._searchLogical(t);return function(t,{ignoreFieldNorm:e=f.ignoreFieldNorm}){t.forEach((t=>{let n=1;t.matches.forEach((({key:t,norm:r,score:i})=>{const s=t?t.weight:null;n*=Math.pow(0===i&&s?Number.EPSILON:i,(s||1)*(e?1:r))})),t.score=n}))}(h,{ignoreFieldNorm:c}),o&&h.sort(a),r(n)&&n>-1&&(h=h.slice(0,n)),function(t,e,{includeMatches:n=f.includeMatches,includeScore:r=f.includeScore}={}){const i=[];return n&&i.push(q),r&&i.push(J),t.map((t=>{const{idx:n}=t,r={item:e[n],refIndex:n};return i.length&&i.forEach((e=>{e(t,r)})),r}))}(h,this._docs,{includeMatches:i,includeScore:s})}_searchStringList(t){const e=A(t,this.options),{records:n}=this._myIndex,r=[];return n.forEach((({v:t,i:n,n:i})=>{if(!o(t))return;const{isMatch:s,score:a,indices:c}=e.searchIn(t);s&&r.push({item:t,idx:n,matches:[{score:a,value:t,norm:i,indices:c}]})})),r}_searchLogical(t){const e=B(t,this.options),n=(t,e,r)=>{if(!t.children){const{keyId:n,searcher:i}=t,s=this._findMatches({key:this._keyStore.get(n),value:this._myIndex.getValueForItemAtKeyId(e,n),searcher:i});return s&&s.length?[{idx:r,item:e,matches:s}]:[]}switch(t.operator){case _:{const i=[];for(let s=0,o=t.children.length;s<o;s+=1){const o=t.children[s],a=n(o,e,r);if(!a.length)return[];i.push(...a)}return i}case F:{const i=[];for(let s=0,o=t.children.length;s<o;s+=1){const o=t.children[s],a=n(o,e,r);if(a.length){i.push(...a);break}}return i}}},r=this._myIndex.records,i={},s=[];return r.forEach((({$:t,i:r})=>{if(o(t)){let o=n(e,t,r);o.length&&(i[r]||(i[r]={idx:r,item:t,matches:[]},s.push(i[r])),o.forEach((({matches:t})=>{i[r].matches.push(...t)})))}})),s}_searchObjectList(t){const e=A(t,this.options),{keys:n,records:r}=this._myIndex,i=[];return r.forEach((({$:t,i:r})=>{if(!o(t))return;let s=[];n.forEach(((n,r)=>{s.push(...this._findMatches({key:n,value:t[r],searcher:e}))})),s.length&&i.push({idx:r,item:t,matches:s})})),i}_findMatches({key:e,value:n,searcher:r}){if(!o(n))return[];let i=[];if(t(n))n.forEach((({v:t,i:n,n:s})=>{if(!o(t))return;const{isMatch:a,score:c,indices:h}=r.searchIn(t);a&&i.push({score:c,key:e,value:t,idx:n,norm:s,indices:h})}));else{const{v:t,n:s}=n,{isMatch:o,score:a,indices:c}=r.searchIn(t);o&&i.push({score:a,key:e,value:t,norm:s,indices:c})}return i}}U.version="6.4.6",U.createIndex=v,U.parseIndex=function(t,{getFn:e=f.getFn}={}){const{keys:n,records:r}=t,i=new m({getFn:e});return i.setKeys(n),i.setIndexRecords(r),i},U.config=f,U.parseQuery=B,function(...t){T.push(...t)}(O);const z=U;
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */
var D=Object.prototype.toString,H=Array.isArray||function(t){return"[object Array]"===D.call(t)};function K(t){return"function"==typeof t}function V(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function G(t,e){return null!=t&&"object"==typeof t&&e in t}var X=RegExp.prototype.test;var Y=/\S/;function Z(t){return!function(t,e){return X.call(t,e)}(Y,t)}var Q={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};var tt=/\s*/,et=/\s+/,nt=/\s*=/,rt=/\s*\}/,it=/#|\^|\/|>|\{|&|=|!/;function st(t){this.string=t,this.tail=t,this.pos=0}function ot(t,e){this.view=t,this.cache={".":this.view},this.parent=e}function at(){this.templateCache={_cache:{},set:function(t,e){this._cache[t]=e},get:function(t){return this._cache[t]},clear:function(){this._cache={}}}}st.prototype.eos=function(){return""===this.tail},st.prototype.scan=function(t){var e=this.tail.match(t);if(!e||0!==e.index)return"";var n=e[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},st.prototype.scanUntil=function(t){var e,n=this.tail.search(t);switch(n){case-1:e=this.tail,this.tail="";break;case 0:e="";break;default:e=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=e.length,e},ot.prototype.push=function(t){return new ot(t,this)},ot.prototype.lookup=function(t){var e,n,r,i=this.cache;if(i.hasOwnProperty(t))e=i[t];else{for(var s,o,a,c=this,h=!1;c;){if(t.indexOf(".")>0)for(s=c.view,o=t.split("."),a=0;null!=s&&a<o.length;)a===o.length-1&&(h=G(s,o[a])||(n=s,r=o[a],null!=n&&"object"!=typeof n&&n.hasOwnProperty&&n.hasOwnProperty(r))),s=s[o[a++]];else s=c.view[t],h=G(c.view,t);if(h){e=s;break}c=c.parent}i[t]=e}return K(e)&&(e=e.call(this.view)),e},at.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},at.prototype.parse=function(t,e){var n=this.templateCache,r=t+":"+(e||ct.tags).join(":"),i=void 0!==n,s=i?n.get(r):void 0;return null==s&&(s=function(t,e){if(!t)return[];var n,r,i,s=!1,o=[],a=[],c=[],h=!1,u=!1,l="",d=0;function p(){if(h&&!u)for(;c.length;)delete a[c.pop()];else c=[];h=!1,u=!1}function f(t){if("string"==typeof t&&(t=t.split(et,2)),!H(t)||2!==t.length)throw new Error("Invalid tags: "+t);n=new RegExp(V(t[0])+"\\s*"),r=new RegExp("\\s*"+V(t[1])),i=new RegExp("\\s*"+V("}"+t[1]))}f(e||ct.tags);for(var g,m,v,y,x,w,k=new st(t);!k.eos();){if(g=k.pos,v=k.scanUntil(n))for(var M=0,E=v.length;M<E;++M)Z(y=v.charAt(M))?(c.push(a.length),l+=y):(u=!0,s=!0,l+=" "),a.push(["text",y,g,g+1]),g+=1,"\n"===y&&(p(),l="",d=0,s=!1);if(!k.scan(n))break;if(h=!0,m=k.scan(it)||"name",k.scan(tt),"="===m?(v=k.scanUntil(nt),k.scan(nt),k.scanUntil(r)):"{"===m?(v=k.scanUntil(i),k.scan(rt),k.scanUntil(r),m="&"):v=k.scanUntil(r),!k.scan(r))throw new Error("Unclosed tag at "+k.pos);if(x=">"==m?[m,v,g,k.pos,l,d,s]:[m,v,g,k.pos],d++,a.push(x),"#"===m||"^"===m)o.push(x);else if("/"===m){if(!(w=o.pop()))throw new Error('Unopened section "'+v+'" at '+g);if(w[1]!==v)throw new Error('Unclosed section "'+w[1]+'" at '+g)}else"name"===m||"{"===m||"&"===m?u=!0:"="===m&&f(v)}if(p(),w=o.pop())throw new Error('Unclosed section "'+w[1]+'" at '+k.pos);return function(t){for(var e,n=[],r=n,i=[],s=0,o=t.length;s<o;++s)switch((e=t[s])[0]){case"#":case"^":r.push(e),i.push(e),r=e[4]=[];break;case"/":i.pop()[5]=e[2],r=i.length>0?i[i.length-1][4]:n;break;default:r.push(e)}return n}(function(t){for(var e,n,r=[],i=0,s=t.length;i<s;++i)(e=t[i])&&("text"===e[0]&&n&&"text"===n[0]?(n[1]+=e[1],n[3]=e[3]):(r.push(e),n=e));return r}(a))}(t,e),i&&n.set(r,s)),s},at.prototype.render=function(t,e,n,r){var i=this.getConfigTags(r),s=this.parse(t,i),o=e instanceof ot?e:new ot(e,void 0);return this.renderTokens(s,o,n,t,r)},at.prototype.renderTokens=function(t,e,n,r,i){for(var s,o,a,c="",h=0,u=t.length;h<u;++h)a=void 0,"#"===(o=(s=t[h])[0])?a=this.renderSection(s,e,n,r,i):"^"===o?a=this.renderInverted(s,e,n,r,i):">"===o?a=this.renderPartial(s,e,n,i):"&"===o?a=this.unescapedValue(s,e):"name"===o?a=this.escapedValue(s,e,i):"text"===o&&(a=this.rawValue(s)),void 0!==a&&(c+=a);return c},at.prototype.renderSection=function(t,e,n,r,i){var s=this,o="",a=e.lookup(t[1]);if(a){if(H(a))for(var c=0,h=a.length;c<h;++c)o+=this.renderTokens(t[4],e.push(a[c]),n,r,i);else if("object"==typeof a||"string"==typeof a||"number"==typeof a)o+=this.renderTokens(t[4],e.push(a),n,r,i);else if(K(a)){if("string"!=typeof r)throw new Error("Cannot use higher-order sections without the original template");null!=(a=a.call(e.view,r.slice(t[3],t[5]),(function(t){return s.render(t,e,n,i)})))&&(o+=a)}else o+=this.renderTokens(t[4],e,n,r,i);return o}},at.prototype.renderInverted=function(t,e,n,r,i){var s=e.lookup(t[1]);if(!s||H(s)&&0===s.length)return this.renderTokens(t[4],e,n,r,i)},at.prototype.indentPartial=function(t,e,n){for(var r=e.replace(/[^ \t]/g,""),i=t.split("\n"),s=0;s<i.length;s++)i[s].length&&(s>0||!n)&&(i[s]=r+i[s]);return i.join("\n")},at.prototype.renderPartial=function(t,e,n,r){if(n){var i=this.getConfigTags(r),s=K(n)?n(t[1]):n[t[1]];if(null!=s){var o=t[6],a=t[5],c=t[4],h=s;0==a&&c&&(h=this.indentPartial(s,c,o));var u=this.parse(h,i);return this.renderTokens(u,e,n,h,r)}}},at.prototype.unescapedValue=function(t,e){var n=e.lookup(t[1]);if(null!=n)return n},at.prototype.escapedValue=function(t,e,n){var r=this.getConfigEscape(n)||ct.escape,i=e.lookup(t[1]);if(null!=i)return"number"==typeof i&&r===ct.escape?String(i):r(i)},at.prototype.rawValue=function(t){return t[1]},at.prototype.getConfigTags=function(t){return H(t)?t:t&&"object"==typeof t?t.tags:void 0},at.prototype.getConfigEscape=function(t){return t&&"object"==typeof t&&!H(t)?t.escape:void 0};var ct={name:"mustache.js",version:"4.2.0",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(t){ht.templateCache=t},get templateCache(){return ht.templateCache}},ht=new at;ct.clearCache=function(){return ht.clearCache()},ct.parse=function(t,e){return ht.parse(t,e)},ct.render=function(t,e,n,r){if("string"!=typeof t)throw new TypeError('Invalid template! Template should be a "string" but "'+((H(i=t)?"array":typeof i)+'" was given as the first argument for mustache#render(template, view, partials)'));var i;return ht.render(t,e,n,r)},ct.escape=function(t){return String(t).replace(/[&<>"'`=\/]/g,(function(t){return Q[t]}))},ct.Scanner=st,ct.Context=ot,ct.Writer=at;const ut=ct;var lt=n(813);class dt{constructor(t){this.form=t,this.highlightOptions={element:"span",className:"text-accent"},this.paginate=10,this.page=1,this.loading=!1}run(){this.title=document.title,this.resultsElement=document.getElementById("searchResults"),this.stat=document.getElementById("searchStat"),this.loadingSpinner=document.getElementById("loadingSpinner"),this.tmplMissingKeywords=document.getElementById("templateMissingKeywords").innerHTML,this.tmplNoResults=document.getElementById("templateNoResults").innerHTML,this.tmplStat=document.getElementById("templateStat").innerHTML,this.tmplResult=document.getElementById("templateResult").innerHTML,this.resultContentWordCount=window.searchResultContentWordCount,this.paginate=window.searchPaginate,this.initForm(),this.initFuse();const t=this;this.loadMore=document.getElementById("btnLoadMore"),this.loadMore.addEventListener("click",(()=>{t.poplateResults()}))}initFuse(){const t=this;this.fuseOptions=window.fuseOptions,console.debug(t.fuseOptions);const e=new XMLHttpRequest;e.onreadystatechange=()=>{if(4===e.readyState){if(200!==e.status)return void console.error({error:e.statusText});const n=e.response;t.fuse=new z(n,t.fuseOptions),t.search(t.input.value)}},e.responseType="json",e.open("GET",document.head.querySelector('meta[data-name="search-index"]').getAttribute("content"),!0),e.send(null)}initForm(){this.input=this.form.querySelector('input[name="q"]'),this.searchBarInput=document.querySelector('.search-bar input[name="q"]'),""===this.input.value&&(this.input.value=dt.getKeywordFromURL()),this.searchBarInput.value=this.input.value,document.querySelector(".search-bar input");const t=this;this.form.addEventListener("submit",(e=>{t.handleSubmit(e)}))}handleSubmit(t){this.search(this.input.value),this.searchBarInput.value=this.input.value,t.preventDefault()}static getKeywordFromURL(){return new URLSearchParams(window.location.search).get("q")}hideLoadMoreBtn(){this.loadMore.classList.add("d-none")}showLoadMoreBtn(){this.loadMore.classList.remove("d-none")}search(t){if(this.loadingSpinner.classList.remove("d-none"),this.resultsElement.innerHTML="",""===t)return this.stat.innerHTML=this.tmplMissingKeywords,void this.hideLoadMoreBtn();this.page=1,this.setPage(t);const e=this.fuse.search(t);console.debug({results:e}),this.results=e,this.loadingSpinner.classList.add("d-none"),this.results.length>this.paginate?this.showLoadMoreBtn():this.hideLoadMoreBtn(),e.length>0?this.poplateResults():this.stat.innerHTML=this.tmplNoResults}setPage(t){const e=(t?`${t} - `:"")+this.title,n=`${window.location.pathname}?q=${encodeURIComponent(t)}`;window.history.pushState(null,e,n),document.title=e}static normalizeTaxonomy(t,e){return e(t).toLowerCase().replace(" ","-")}poplateResults(){if(!this.results)return;if(this.loading)return;this.loading=!0,this.loadMore.setAttribute("disabled",""),this.stat.innerHTML=ut.render(this.tmplStat,{total:this.results.length});const t=this;let e=(this.page-1)*this.paginate,n=0;for(;e<this.results.length&&n<this.paginate;e+=1,n+=1){const n=this.results[e],r=(this.page-1)*this.paginate+e,i=[],s=[];n.matches.forEach((t=>{t.indices.forEach((e=>{const n=t.value.substring(e[0],e[1]+1);switch(t.key){case"title":i.push(n);break;case"content":s.push(n)}}))}));let{content:o}=n.item;if(o.length>t.resultContentWordCount){let e=0;if(s.length>0){const n=o.indexOf(s[0]);n+s[0].length>t.resultContentWordCount-1&&(e=n)}o=(0===e?"":"...")+o.substring(e,e+t.resultContentWordCount)+"..."}const a=`searchResult${r}`;t.resultsElement.insertAdjacentHTML("beforeend",ut.render(t.tmplResult,{title:n.item.title,content:o,id:a,img:n.item.img,permalink:n.item.permalink,categories:n.item.categories,tags:n.item.tags,series:n.item.series,score:dt.formatScore(n.score),date:n.item.date,url:()=>dt.normalizeTaxonomy})),t.highlight(a,i,s)}this.loading=!1,this.loadMore.removeAttribute("disabled"),this.results.length<=this.paginate*this.page?this.hideLoadMoreBtn():this.showLoadMoreBtn(),this.page+=1}static formatScore(t){return(100*(1-t)).toFixed(1)}highlight(t,e,n){new lt(document.querySelectorAll(`#${t} .search-result-title`)).mark(e,this.highlightOptions);new lt(document.querySelectorAll(`#${t} .search-result-content`)).mark(n,this.highlightOptions)}}document.addEventListener("DOMContentLoaded",(()=>{new dt(document.querySelector("#searchForm")).run()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,